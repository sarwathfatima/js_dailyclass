//24-nov-22

//bitwise operator in js

//bitwise AND    &
/*
Truth table
A  B  A&B
0  0   0
0  1   0
1  0   0
1  1   1

EXAMPLES:
EG:1:-console.log(10 & 5);
simple step to solve this is...first convert  the numbers decimal to binaries then convert this answer into decimal
so,
10 = 1 0 1 0
5  = 0 1 0 1
     0 0 0 0 = 0
EG:2:-console.log(10 & 7);
10 = 1 0 1 0
7  = 0 1 1 1
     0 0 1 0 = 2
EG:3:-console.log(8 & 9);
8 = 1 0 0 0     
9 = 1 0 0 1
    1 0 0 0 = 8
*/
  

//bitwise OR |
/*    
Truth table
A  B  A | B
0  0    0
0  1    1
1  0    1
1  1    1

EXAMPLES:
EG:1:-console.log(6 | 9);
follow the same steps of bitwise AND &
so,
6 = 0 1 1 0
9 = 1 0 0 1
    1 1 1 1 = 15
EG:2:-console.log(5 | 7);
5 = 0 1 0 1
7 = 0 1 1 1
    0 1 1 1 = 7    
*/


//bitwise XOR ^
/*
Truth table 
A  B  A^B
0  0   0
0  1   1
1  0   1
1  1   0
EXAMPLES:
EG:1:-console.log(15 ^ 12);
follow the same steps bitwise (AND &), (OR |)
15 = 1 1 1 1
12 = 1 1 0 0
     0 0 1 1 = 3
EG:2:-console.log(6 ^ 4);
6 = 1 1 0
4 = 1 0 0
    0 1 0 = 2
*/


//bitwise NOT ~
/*
it is also called negation operator
flip / invert the Bits 
its contain operator
EXAMPLES:
EG:1:-console.log(~ 5);
first do padding then its flip, then do 1's complement then 2's complement 
5 = 1 0 1
5 = 0 0 0 0 0 1 0 1
  = 1 1 1 1 1 0 1 0 //hear its fliping
1's complement = 0 0 0 0 0 1 0 1
2's complement =             + 1
               = 0 0 0 0 0 1 1 0  = -6
EG:2:-console.log(~ 8);
8 = 1 0 0 0
8 = 0 0 0 0 1 0 0 0
  = 1 1 1 1 0 1 1 1//hear its fliping
1's complement = 0 0 0 0 1 0 0 0
2's complement =             + 1
               = 0 0 0 0 1 0 0 1 = -9
FORMULA: ~a = -(a+1);


even numbers:
2 = 10
4 = 100
6 = 110
8 = 1000
10 = 1010
12 = 1100
14 = 1110
16 = 10000
18 = 10010
20 = 10100

odd number 
1 = 1
3 = 011
5 = 101
7 = 111
9 = 1001
11 = 1011
13 = 1101
15 = 1111
17 = 10001
19 = 1001

here we notice that the even numbers end with 0 and the odd numbers end with 1
so,
if its "0" at the end is knows as even
if its "1" at the end is knows as odd
EG:-1 =000000000000000000000000000001
whatever before the last digit its nullof 
*/

 





